// BlacklightController.cs
using UnityEngine;

/// <summary>
/// Main controller for the blacklight puzzle. This script finds all MRUK lights and
/// BlacklightClues to orchestrate the blacklight effect.
/// </summary>
public class BlacklightController : MonoBehaviour
{
    [Header("Effect Settings")]
    [SerializeField]
    [Tooltip("The color the scene lights will change to during the blacklight effect.")]
    private Color m_blacklightColor = new Color(0.6f, 0.4f, 1f); // A nice purple

    [Header("Component References")]
    [SerializeField]
    [Tooltip("Optional: Assign the passthrough effect controller. If left null, it will be found automatically.")]
    private PassthroughBlacklightEffect m_passthroughEffect;

    // Private state storage
    private Light[] m_sceneLights;
    private Color[] m_originalLightColors;
    private BlacklightClue[] m_sceneClues;
    private bool m_isBlacklightActive = false;

    void Start()
    {
        // 1. Find the Passthrough Effect Controller
        if (m_passthroughEffect == null)
        {
            m_passthroughEffect = FindObjectOfType<PassthroughBlacklightEffect>();
        }
        if (m_passthroughEffect == null)
        {
            Debug.LogError("BlacklightController: Missing PassthroughBlacklightEffect in the scene!", this);
        }

        // 2. Find all the lights generated by MRUK (or placed manually)
        m_sceneLights = FindObjectsOfType<Light>();
        m_originalLightColors = new Color[m_sceneLights.Length];
        for (int i = 0; i < m_sceneLights.Length; i++)
        {
            m_originalLightColors[i] = m_sceneLights[i].color;
        }

        // 3. Find all the blacklight clues in the scene
        m_sceneClues = FindObjectsOfType<BlacklightClue>();

        // Ensure the effect is off at the start
        SetBlacklightState(false);
    }

    /// <summary>
    /// Public method to easily toggle the blacklight effect on and off.
    /// You can link a UI button's OnClick() event to this method.
    /// </summary>
    public void ToggleBlacklight()
    {
        m_isBlacklightActive = !m_isBlacklightActive;
        SetBlacklightState(m_isBlacklightActive);
    }

    /// <summary>
    /// The core function that changes the state of all related components.
    /// </summary>
    /// <param name="isOn">The desired state for the blacklight effect.</param>
    public void SetBlacklightState(bool isOn)
    {
        // 1. Control the Passthrough Effect
        if (m_passthroughEffect != null)
        {
            m_passthroughEffect.SetEffect(isOn);
        }

        // 2. Change the color of all scene lights
        for (int i = 0; i < m_sceneLights.Length; i++)
        {
            if (m_sceneLights[i] != null)
            {
                m_sceneLights[i].color = isOn ? m_blacklightColor : m_originalLightColors[i];
            }
        }

        // 3. Reveal or hide all the clues
        foreach (var clue in m_sceneClues)
        {
            if (clue != null)
            {
                clue.SetRevealed(isOn);
            }
        }

        m_isBlacklightActive = isOn;
    }
}